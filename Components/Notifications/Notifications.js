import React from 'react'
import { ScrollView, Button, AppState, PushNotificationIOS } from 'react-native'
import NotificationItem from './NotificationItem'
import TopRightBar from '../Shared/TopRightBar'
import { API } from 'aws-amplify'
import { connect } from 'react-redux'

class Notifications extends React.Component {

    static navigationOptions = ({navigation}) => {
        return {
            headerRight: <TopRightBar navigation={navigation}/>
        }
    }

    // constructor(props) {
    //     super(props)

    //     // Working with the notifications

    //     PushNotification.configure({

    //         // (optional) Called when Token is generated (iOS and Android)
    //         onRegister: function(token) {
    //             // I receive the token representing my mobile

    //             // Get the token in a variable
    //             let receivedToken = token.token

    //             console.log("Received the token:", receivedToken)

    //             var params = {
    //                 PlatformApplicationArn: 'arn:aws:sns:us-west-1:376675122714:app/APNS/Openclique',
    //                 Token: receivedToken
    //             };

    //             // I create a new endpoint for the mobile phone, now I need to figure out how to send a message to the mobile
    //             sns.createPlatformEndpoint(params, (err, data) => {
    //                 if (err) {
    //                     console.log(err, err.stack)
    //                 }
    //                 else {
    //                     console.log(data)
    //                 }
    //             })

    //         },
        
    //         // (required) Called when a remote or local notification is opened or received
    //         onNotification: function(notification) {
    //             console.log( 'NOTIFICATION:', notification );
        
    //             // process the notification
        
    //             // required on iOS only (see fetchCompletionHandler docs: https://facebook.github.io/react-native/docs/pushnotificationios.html)
    //             notification.finish(PushNotificationIOS.FetchResult.NoData);
    //         },
        
    //         // ANDROID ONLY: GCM or FCM Sender ID (product_number) (optional - not required for local notifications, but is need to receive remote push notifications)
    //         senderID: "YOUR GCM (OR FCM) SENDER ID",
        
    //         // IOS ONLY (optional): default: all - Permissions to register.
    //         permissions: {
    //             alert: true,
    //             badge: true,
    //             sound: true
    //         },
        
    //         // Should the initial notification be popped automatically
    //         // default: true
    //         popInitialNotification: true,
        
    //         /**
    //           * (optional) default: true
    //           * - Specified if permissions (ios) and token (android and ios) will requested or not,
    //           * - if not, you must call PushNotificationsHandler.requestPermissions() later
    //           */
    //         requestPermissions: true,
    //     });
    // }

    // _sendNotif() {
    //     PushNotification.localNotification({
    //         /* Android Only Properties */
    //         // id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    //         // ticker: "My Notification Ticker", // (optional)
    //         // autoCancel: true, // (optional) default: true
    //         // largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
    //         // smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
    //         // bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
    //         // subText: "This is a subText", // (optional) default: none
    //         // color: "red", // (optional) default: system default
    //         // vibrate: true, // (optional) default: true
    //         // vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
    //         // tag: 'some_tag', // (optional) add tag to message
    //         // group: "group", // (optional) add group to message
    //         // ongoing: false, // (optional) set whether this is an "ongoing" notification
    //         // priority: "high", // (optional) set notification priority, default: high
    //         // visibility: "private", // (optional) set notification visibility, default: private
    //         // importance: "high", // (optional) set notification importance, default: high
        
    //         // /* iOS only properties */
    //         // alertAction: 'view',// (optional) default: view
    //         // category: // (optional) default: null
    //         // userInfo: // (optional) default: null (object containing additional notification data)
        
    //         /* iOS and Android properties */
    //         title: "My Notification Title", // (optional)
    //         message: "My Notification Message", // (required)
    //         // playSound: false, // (optional) default: true
    //         // soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
    //         // number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
    //         // repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
    //         // actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
    //     });
    // }


    // _sendNotif = () => {

    //     fetch('https://gf3tcxpki0.execute-api.us-east-2.amazonaws.com/dev/@connections/fl7HNdszCYcCJuQ').then(data => {
    //         console.log(data)
    //     })

    // }

    render() {
        var notifications = [...this.props.user.info.notifications]
        return (
            <ScrollView>
                {notifications.reverse().map((item, index) => <NotificationItem key={index} item={item} />)}
            </ScrollView>
        )
    }
}

const mapStateToProps = state => {
    return {
        user: state.user
    }
}

export default connect(mapStateToProps)(Notifications)